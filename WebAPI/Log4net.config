<?xml version="1.0" encoding="utf-8"?>
<configuration>
	<configSections>
		<section name="log4net" type="log4net.Config.Log4NetConfigurationSectionHandler, log4net"/>
	</configSections>
	<system.web>
		<compilation debug="true" targetFramework="4.7.2" />
		<httpRuntime targetFramework="4.7.2" />
	</system.web>
	<log4net>
		<!--错误日志：：：记录错误日志-->
		<!--按日期分割日志文件 一天一个-->
		<!-- appender 定义日志输出方式   将日志以回滚文件的形式写到文件中。-->
		<appender name="ErrorAppender" type="log4net.Appender.RollingFileAppender">
			<!--保存路径：下面路径项目启动的时候自动在C盘中创建log、logError文件-->
			<file value="log/error/error_" />
			<!-- 如果想在本项目中添加路径，那就直接去掉C:\\  只设置log\\LogError   项目启动中默认创建文件 -->
			<appendToFile value="true"/>
			<!--按照何种方式产生多个日志文件(日期[Date],文件大小[Size],混合[Composite])-->
			<rollingStyle value="Date"/>
			<!--这是按日期产生文件夹-->
			<datePattern value="yyyy-MM-dd'.log'"/>
			<!--是否只写到一个文件中-->
			<staticLogFileName value="false"/>
			<!--保留的log文件数量 超过此数量后 自动删除之前的   好像只有在 按Size分割时有效 设定值value="－1"为不限文件数-->
			<param name="MaxSizeRollBackups" value="100"/>
			<!--每个文件的大小。只在混合方式与文件大小方式下使用。超出大小后在所有文件名后自动增加正整数重新命名，数字最大的最早写入。可用的单位:KB|MB|GB。不要使用小数,否则会一直写入当前日志-->
			<maximumFileSize value="50M" />
			<!-- layout 控制Appender的输出格式，也可以是xml  一个Appender只能是一个layout-->
			<layout type="log4net.Layout.PatternLayout">
				<!--每条日志末尾的文字说明-->
				<!--输出格式 模板-->
				<!-- <param name="ConversionPattern"  value="记录时间：%date 线程ID:[%thread] 日志级别：%-5level 记录类：%logger   
        操作者ID：%property{Operator} 操作类型：%property{Action}%n  当前机器名:%property%n当前机器名及登录用户：%username %n  
        记录位置：%location%n 消息描述：%property{Message}%n   异常：%exception%n 消息：%message%newline%n%n" />-->

				<!--样例：2008-03-26 13:42:32,111 [10] INFO  Log4NetDemo.MainClass [(null)] - info-->
				<!--<conversionPattern value="%newline %n记录时间：%date %n线程ID:[%thread] %n日志级别： %-5level %n错误描述：%message%newline %n"/>-->
				<conversionPattern value="%n＝＝＝＝＝＝＝＝＝＝
                                  %n【日志级别】%-5level
                                  %n【记录时间】%date
                                  %n【执行时间】[%r]毫秒
                                  %n【出错文件】%F
                                  %n【出错行号】%L
                                  %n【出错的类】%logger 属性[%property{NDC}]
                                  %n【错误描述】%message
                                  %n【错误详情】%newline"/>
			</layout>
			<!--log4设定的级别过滤器 低级ERROR和高于FATAL的级别会被过滤掉-->
			<filter type="log4net.Filter.LevelRangeFilter,log4net">
				<levelMin value="ERROR" />
				<levelMax value="FATAL" />
			</filter>
		</appender>

		<!--DEBUG：：：记录DEBUG日志-->
		<!--按日期分割日志文件 一天一个-->
		<!-- appender 定义日志输出方式   将日志以回滚文件的形式写到文件中。-->
		<appender name="DebugAppender" type="log4net.Appender.RollingFileAppender">
			<!--保存路径：下面路径项目启动的时候自动在C盘中创建log、logError文件-->
			<file value="log/debug/debug_" />
			<!-- 如果想在本项目中添加路径，那就直接去掉C:\\  只设置log\\LogError   项目启动中默认创建文件 -->
			<appendToFile value="true"/>
			<!--按照何种方式产生多个日志文件(日期[Date],文件大小[Size],混合[Composite])-->
			<rollingStyle value="Date"/>
			<!--这是按日期产生文件夹-->
			<datePattern value="yyyy-MM-dd'.log'"/>
			<!--是否只写到一个文件中-->
			<staticLogFileName value="false"/>
			<!--保留的log文件数量 超过此数量后 自动删除之前的   好像只有在 按Size分割时有效 设定值value="－1"为不限文件数-->
			<param name="MaxSizeRollBackups" value="100"/>
			<!--每个文件的大小。只在混合方式与文件大小方式下使用。超出大小后在所有文件名后自动增加正整数重新命名，数字最大的最早写入。可用的单位:KB|MB|GB。不要使用小数,否则会一直写入当前日志-->
			<maximumFileSize value="50M" />
			<!-- layout 控制Appender的输出格式，也可以是xml  一个Appender只能是一个layout-->
			<layout type="log4net.Layout.PatternLayout">
				<!--每条日志末尾的文字说明-->
				<!--输出格式 模板-->
				<!-- <param name="ConversionPattern"  value="记录时间：%date 线程ID:[%thread] 日志级别：%-5level 记录类：%logger   
        操作者ID：%property{Operator} 操作类型：%property{Action}%n  当前机器名:%property%n当前机器名及登录用户：%username %n  
        记录位置：%location%n 消息描述：%property{Message}%n   异常：%exception%n 消息：%message%newline%n%n" />-->

				<!--样例：2008-03-26 13:42:32,111 [10] INFO  Log4NetDemo.MainClass [(null)] - info-->
				<!--<conversionPattern value="%newline %n记录时间：%date %n线程ID:[%thread] %n日志级别： %-5level %n错误描述：%message%newline %n"/>-->
				<conversionPattern value="%n＝＝＝＝＝＝＝＝＝＝
                                  %n【日志级别】%-2level
                                  %n【记录时间】%date
                                  %n【执行时间】[%r]毫秒
                                  %n【debug文件】%F
                                  %n【debug行号】%L
                                  %n【debug类】%logger 属性[%property{NDC}]
                                  %n【debug描述】%message"/>
			</layout>
			<!--log4设定的级别过滤器 低级DEBUG和高于WARN的级别会被过滤掉 关于级别问题可以看log4官网-->
			<filter type="log4net.Filter.LevelRangeFilter,log4net">
				<levelMin value="DEBUG" />
				<levelMax value="WARN" />
			</filter>
		</appender>

		<!--错误日志：：： 插入到数据库-->
		<appender name="ADONetAppender" type="log4net.Appender.ADONetAppender">
			<!--bufferSize：满足多少条的情况下会插入数据库-->
			<bufferSize value="1" />
			<connectionType value="System.Data.SqlClient.SqlConnection, System.Data, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
			<connectionString value="DATABASE=log4net;SERVER=.;UID=sa;PWD=svse1234.;Connect Timeout=15;" />
			<commandText value="INSERT INTO Log([LogDate],[LogThread],[LogLevel],[LogLineNum],[FileName],[Logger],[Message],[Exception],[UserID],[IP],[MenuID],[OperaterType],[RequestUrl]) 
                                VALUES (@LogDate, @LogThread, @LogLevel,@LogLineNum,@FileName,@Logger, @Message, @Exception,@UserID,@IP,@MenuID,@OperaterType,@RequestUrl)" />
			<parameter>
				<parameterName value="@LogDate" />
				<dbType value="DateTime" />
				<layout type="log4net.Layout.RawTimeStampLayout" />
			</parameter>
			<parameter>
				<parameterName value="@LogThread" />
				<dbType value="String" />
				<size value="5000" />
				<layout type="log4net.Layout.PatternLayout">
					<conversionPattern value="%t" />
				</layout>
			</parameter>
			<parameter>
				<parameterName value="@LogLevel" />
				<dbType value="String" />
				<size value="5000" />
				<layout type="log4net.Layout.PatternLayout">
					<conversionPattern value="%p" />
				</layout>
			</parameter>
			<parameter>
				<parameterName value="@LogLineNum" />
				<dbType value="String" />
				<size value="5000" />
				<layout type="log4net.Layout.PatternLayout">
					<conversionPattern value="%L" />
				</layout>
			</parameter>
			<parameter>
				<parameterName value="@FileName" />
				<dbType value="String" />
				<size value="5000" />
				<layout type="log4net.Layout.PatternLayout">
					<conversionPattern value="%F" />
				</layout>
			</parameter>
			<parameter>
				<parameterName value="@Logger" />
				<dbType value="String" />
				<size value="5000" />
				<layout type="log4net.Layout.PatternLayout">
					<conversionPattern value="%logger" />
				</layout>
			</parameter>
			<parameter>
				<parameterName value="@Message" />
				<dbType value="String" />
				<size value="5000" />
				<!--WebAPI.ConfigurationTools.Log4.ActionLayoutPattern:命名控件+类名组成-->
				<layout type="WebAPI.ConfigurationTools.Log4.Log4ActionLayoutPattern">
					<conversionPattern value="%Log4ActionInfo{Message}"/>
				</layout>
			</parameter>
			<parameter>
				<parameterName value="@Exception" />
				<dbType value="String" />
				<size value="100000" />
				<layout type="WebAPI.ConfigurationTools.Log4.Log4ActionLayoutPattern">
					<conversionPattern value="%Log4ActionInfo{Exception}"/>
				</layout>
			</parameter>
			<parameter>
				<parameterName value="@UserID" />
				<dbType value="String"/>
				<size value="5000" />
				<layout type="WebAPI.ConfigurationTools.Log4.Log4ActionLayoutPattern">
					<conversionPattern value="%Log4ActionInfo{UserID}"/>
				</layout>
			</parameter>
			<parameter>
				<parameterName value="@IP" />
				<dbType value="String" />
				<size value="5000" />
				<layout type="WebAPI.ConfigurationTools.Log4.Log4ActionLayoutPattern">
					<conversionPattern value="%Log4ActionInfo{IP}"/>
				</layout>
			</parameter>
			<parameter>
				<parameterName value="@MenuID" />
				<dbType value="Int32"/>
				<layout type="WebAPI.ConfigurationTools.Log4.Log4ActionLayoutPattern">
					<conversionPattern value="%Log4ActionInfo{MenuID}"/>
				</layout>
			</parameter>
			<parameter>
				<parameterName value="@OperaterType" />
				<dbType value="String"/>
				<size value="5000" />
				<layout type="WebAPI.ConfigurationTools.Log4.Log4ActionLayoutPattern">
					<conversionPattern value="%Log4ActionInfo{OperaterType}"/>
				</layout>
			</parameter>
			<parameter>
				<parameterName value="@RequestUrl" />
				<dbType value="String"/>
				<size value="5000" />
				<layout type="WebAPI.ConfigurationTools.Log4.Log4ActionLayoutPattern">
					<conversionPattern value="%Log4ActionInfo{RequestUrl}"/>
				</layout>
			</parameter>
			<!--数据库值插入ERROR级别的数据-->
			<filter type="log4net.Filter.LevelRangeFilter,log4net">
				<levelMin value="ERROR" />
				<levelMax value="FATAL" />
			</filter>
		</appender>
		<!-- setup the root category, add the appenders and set the default level -->

		<!--跟节点配置-->
		<root>
			<!--控制级别，由低到高: ALL|DEBUG|INFO|WARN|ERROR|FATAL|OFF    只有比level级别高的级别才会被记录-->
			<!--<level value="DEBUG" />-->
			<!--开启记录日志的方式：插入数据库/记录本地【error错误日志，debug日志】-->
			<appender-ref ref="DebugAppender" />
		</root>
		<!--插入数据库logger-->
		<logger name="ADONet.Logging">
			<level value="ERROR" />
			<appender-ref ref="ADONetAppender" />
		</logger>

		
		
		<!--建议配多个logger更灵活
		level没设置 就继承 root里面的level
		appender-ref会继承root里面的 appender-ref
		多个logger之前相互独立 都继承root-->
		<!--<logger name="TestLog.Logging">
			<level value="ERROR" />
			<appender-ref ref="ErrorAppender" />
			<appender-ref ref="DebugAppender" />
		</logger>-->
	</log4net>
</configuration>
